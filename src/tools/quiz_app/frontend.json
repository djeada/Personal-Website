{
    "questions": [
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.navbar .navbar-expand</code>",
                "<code>.navbar .navbar-toggle</code>",
                "<code>.navbar .navbar-expand-lg .navbar-collapse</code>",
                "<code>.navbar .navbar-responsive</code>",
                "<code>.navbar .navbar-mobile</code>"
            ],
            "text": "For a responsive navbar that collapses on small screens, which classes are essential?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>Object.keys({ [sym]: 1 })</code> returns <code>['sym']</code>",
                "Symbol-keyed properties are skipped by <code>for…in</code> and <code>Object.keys()</code>",
                "Symbols coerce to strings implicitly",
                "<code>sym + ''</code> yields <code>'x'</code>",
                "<code>typeof sym === 'string'</code>"
            ],
            "text": "Given <code>const sym = Symbol('x');</code>, which statement is true?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Override it in <code>custom.scss</code> after importing Bootstrap",
                "Override it before <code>@import \"bootstrap\"</code> in your Sass entry file",
                "Use CSS custom properties at runtime",
                "Pass a JS config object to <code>bootstrap.bundle.js</code>",
                "Edit it directly in <code>_variables.scss</code>"
            ],
            "text": "How can you change the global <code>$font-family-base</code> in Bootstrap’s Sass?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>Object.assign({}, obj)</code>",
                "<code>JSON.parse(JSON.stringify(obj))</code>",
                "Use a utility like <code>structuredClone(obj)</code> or spread with nested mappings",
                "<code>Object.freeze(obj)</code>",
                "<code>_.deepFreeze(obj)</code>"
            ],
            "text": "How can you create a <strong>deep clone</strong> of an object in a functional style (no mutation)?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>Object.assign({}, obj)</code>",
                "<code>_.cloneDeep(obj)</code>",
                "<code>JSON.parse(JSON.stringify(obj))</code>",
                "<code>structuredClone(obj)</code>",
                "<code>new Object(obj)</code>"
            ],
            "text": "How can you deep-clone an object that contains no functions or symbols?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>x |> f |> g</code>",
                "<code>f |> x</code>",
                "<code>x |> f(g())</code>",
                "<code>const result = [x].map(f).map(g)[0];</code> or <code>g(f(x))</code>",
                "<code>[x] |> f</code>"
            ],
            "text": "How can you implement a <strong>pipeline</strong> operator (proposal) behavior without syntax sugar?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Use <code>Promise.all(urls.map(fetch))</code> with a <code>concurrency</code> option",
                "Implement a pool/queue that starts only 3 <code>fetch()</code> calls at once and starts next on each completion",
                "Use <code>fetch.concurrent(urls, 3)</code>",
                "Pass <code>{ limit: 3 }</code> as second argument to <code>fetch</code>",
                "Browsers automatically throttle to 3 at a time"
            ],
            "text": "How can you limit concurrency (e.g., only 3 at a time) when fetching many URLs with <code>fetch()</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Edit <code>_variables.scss</code> directly",
                "Use inline style attributes",
                "Create a custom Sass file that defines your variables before importing Bootstrap",
                "Use CSS overrides after Bootstrap’s CSS",
                "Use JavaScript to change styles at runtime"
            ],
            "text": "How can you override Bootstrap variables without modifying its source files?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@scope [data-theme=\"dark\"] { … }</code>",
                "<code>[data-theme=\"dark\"] { … }</code>",
                "<code>:scope(data-theme=\"dark\") { … }</code>",
                "<code>:root(data-theme=\"dark\") { … }</code>",
                "<code>:host([data-theme=\"dark\"]) { … }</code>"
            ],
            "text": "How can you scope CSS rules to only apply under a certain attribute on the root?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>focus=\"true\"</code>",
                "<code>autofocus</code>",
                "<code>initial</code>",
                "<code>start</code>",
                "<code>ready</code>"
            ],
            "text": "How can you specify that an <code><input></code> field should have focus when the page loads?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>f(g(x))</code>",
                "<code>g ∘ f</code>",
                "<code>const compose = (f, g) => x => f(g(x));</code>",
                "<code>const compose = (f, g) => g(f(x));</code>",
                "<code>pipeline(f, g)</code>"
            ],
            "text": "How do you <strong>compose</strong> two functions <code>f</code> and <code>g</code> so that the result applies <code>g</code> then <code>f</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Using <code><meta></code> tags only",
                "Embedding JSON in <code><script></code>",
                "Using <code>itemscope</code> and <code>itemprop</code> attributes",
                "Using <code>data-*</code> attributes only",
                "Using XML inside HTML"
            ],
            "text": "How do you annotate text for machine-readable metadata (e.g., microdata)?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.center();</code>",
                "<code>@include center();</code>",
                "<code>.center();</code>",
                "<code>center();</code>",
                "<code>@center();</code>"
            ],
            "text": "How do you apply a mixin named <code>center()</code> in Less?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>element:active { … }</code>",
                "<code>element:focus { … }</code>",
                "<code>element:hover { … }</code>",
                "<code>element:visit { … }</code>",
                "<code>element:checked { … }</code>"
            ],
            "text": "How do you apply a style when the user hovers over an element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "You can’t catch them; <code>await</code> will terminate the program",
                "<code>await</code> returns an object <code>{ error, value }</code>",
                "Wrap the <code>await</code> call in a <code>try { … } catch (e) { … }</code> block",
                "Use <code>.catch()</code> directly on the awaited value",
                "Pass a second callback to <code>await</code>"
            ],
            "text": "How do you catch errors from an <code>await</code> expression?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>// This is a comment</code>",
                "<code><!-- This is a comment --></code>",
                "<code>/<em> This is a comment </em>/</code>",
                "<code><!-- This is a comment --></code>",
                "<code># This is a comment</code>"
            ],
            "text": "How do you create a comment in HTML?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>new Promise((_, reject) => reject(\"err\"))</code>",
                "<code>Promise.resolve().then(() => { throw \"err\" })</code>",
                "<code>Promise.reject(new Error(\"err\"))</code>",
                "<code>Promise.error(\"err\")</code>",
                "<code>new Error(\"err\")</code>"
            ],
            "text": "How do you create a promise that immediately rejects with an error?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>display: grid-sub;</code>",
                "<code>grid-template-sub: …;</code>",
                "<code>grid-template-columns: subgrid;</code> (on child grid)",
                "<code>grid-sub: true;</code>",
                "<code>grid-template-areas: subgrid;</code>"
            ],
            "text": "How do you create a subgrid in CSS Grid?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Override <code>$breakpoints</code> map before importing Bootstrap",
                "Use CSS custom properties",
                "Override <code>$grid-breakpoints</code> map before importing Bootstrap",
                "Use JavaScript theme API",
                "Modify CSS after compile"
            ],
            "text": "How do you customize Bootstrap’s default breakpoints in Sass?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>--col: blue, red;</code>",
                "<code>--col: blue/fallback(red);</code>",
                "<code>color: var(--col, red);</code>",
                "<code>color: var(blue, --col);</code>",
                "<code>color: fallback(var(--col), red);</code>"
            ],
            "text": "How do you define a CSS custom property with a fallback value?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.col-6 col-md-12</code>",
                "<code>.col-md-6 col-sm-12</code>",
                "<code>.col-12 col-md-6</code>",
                "<code>.col-sm-6 col-md-12</code>",
                "<code>.col-lg-6 col-12</code>"
            ],
            "text": "How do you define a column that spans 6 of 12 grid columns on medium screens and above, but full width on smaller screens?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@mixin button { … }</code>",
                "<code>@mixin button { … }</code>",
                "<code>$mixin button { … }</code>",
                "<code>%button { … }</code>",
                "<code>@include button { … }</code>"
            ],
            "text": "How do you define a mixin in SCSS?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><button class=\"btn btn-primary\" disabled=\"false\"></code>",
                "<code><button class=\"btn btn-primary\" data-disabled></code>",
                "<code><button class=\"btn btn-primary\" disabled></code>",
                "<code><button class=\"btn btn-primary\" disabled=\"true\"></code>",
                "<code><button class=\"btn btn-primary\" .disabled></code>"
            ],
            "text": "How do you disable a Bootstrap button via HTML?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Add <code>dir=\"rtl\"</code> and include the <code>bootstrap.rtl.css</code> build",
                "Just set <code>dir=\"rtl\"</code> on <code><html></code>",
                "Use the <code>.rtl</code> utility class",
                "Add <code>dir=\"rtl\"</code> and include the <code>bootstrap.rtl.css</code> build",
                "Import <code>bootstrap-rtl.css</code> via JavaScript"
            ],
            "text": "How do you enable right-to-left (RTL) support in Bootstrap?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>data-bs-toggle=\"drawer\"</code>",
                "<code>data-bs-target=\"#offcanvas\"</code>",
                "<code>data-bs-show=\"offcanvas\"</code>",
                "<code>data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\"</code>",
                "<code>data-offcanvas=\"true\"</code>"
            ],
            "text": "How do you enable the offcanvas component via data attributes?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@mixin .btn;</code>",
                "<code>@include .btn;</code>",
                "<code>@extend .btn;</code>",
                "<code>$extend: .btn;</code>",
                "<code>%btn;</code>"
            ],
            "text": "How do you extend a selector in SCSS to inherit its styles?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@use 'mixins.less';</code>",
                "<code>@import 'mixins.less';</code>",
                "<code>@include 'mixins.less';</code>",
                "<code>@extend 'mixins.less';</code>",
                "<code>@require 'mixins.less';</code>"
            ],
            "text": "How do you import other Less files?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Use <code>bootstrap.min.js</code> only",
                "Use <code>popper-free.js</code> build",
                "Use the <code>bootstrap.bundle.min.js</code> (it includes Popper)",
                "Use CDN with <code>data-bs-no-deps</code>",
                "Use ES module import without Popper"
            ],
            "text": "How do you include Bootstrap’s JavaScript without any dependencies?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>flex-direction: wrap;</code>",
                "<code>flex-flow: wrap;</code>",
                "<code>flex-wrap: wrap;</code>",
                "<code>flex-lines: wrap;</code>",
                "<code>display: flex-wrap;</code>"
            ],
            "text": "How do you make a flex container wrap its items onto multiple lines?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Using <code>const</code> when declaring the object",
                "Prefix property name with <code>_</code>",
                "Seal the object with <code>Object.seal()</code>",
                "Define it with <code>Object.defineProperty(obj, 'prop', { writable: false })</code>",
                "Freeze the value directly"
            ],
            "text": "How do you make an object’s property read-only?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>font-style: bold;</code>",
                "<code>text-weight: 700;</code>",
                "<code>font-weight: bold;</code>",
                "<code>font-variant: bold;</code>",
                "<code>font: bold;</code>"
            ],
            "text": "How do you make text bold using CSS?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><italic></code>",
                "<code><delete></code>",
                "<code><del></code>",
                "<code><strike></code>",
                "<code><remove></code>"
            ],
            "text": "How do you mark up text that is no longer accurate or relevant?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.container .card { … }</code>",
                "<code>& .card { … }</code> inside <code>.container</code>",
                "<code>.container { .card { … } }</code>",
                "<code>%container { .card { … } }</code>",
                "<code>@nest .card within .container { … }</code>"
            ],
            "text": "How do you nest rules for <code>.card</code> inside <code>.container</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>10px plus 5px</code>",
                "<code>@sum: 10px 5px;</code>",
                "<code>@sum: 10px + 5px;</code>",
                "<code>calc(10px + 5px);</code>",
                "<code>math(10px, +, 5px);</code>"
            ],
            "text": "How do you perform arithmetic in Less (e.g., add 10px + 5px)?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>setTimeout(fn, 0)</code>",
                "<code>queueMicrotask(fn)</code>",
                "<code>requestAnimationFrame(fn)</code>",
                "<code>setImmediate(fn)</code>",
                "<code>Promise.resolve().then(fn)</code>"
            ],
            "text": "How do you schedule a function to run <strong>after</strong> the current call stack is clear, but before repaint?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>.article p { … }</code>",
                "<code>p .article { … }</code>",
                "<code>article > p { … }</code>",
                "<code>.article p { … }</code>",
                "<code>#article p { … }</code>"
            ],
            "text": "How do you select all <code><p></code> elements inside a container with class <code>.article</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.p-3x</code>",
                "<code>.padding-3</code>",
                "<code>.p-3</code>",
                "<code>.pa-3</code>",
                "<code>.all-p-3</code>"
            ],
            "text": "How do you space an element with 3 units of padding on all sides?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><input type=\"number\" min=\"1\" max=\"10\"></code>",
                "<code><input type=\"range\" step=\"1\"></code>",
                "<code><input type=\"number\" min=\"1\" max=\"10\"></code>",
                "<code><input type=\"text\" pattern=\"[1-10]\"></code>",
                "<code><input type=\"digit\" from=\"1\" to=\"10\"></code>"
            ],
            "text": "How do you specify that a field in a form should only accept numbers between 1 and 10?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><html language=\"en\"></code>",
                "<code><html locale=\"en-US\"></code>",
                "<code><html lang=\"en\"></code>",
                "<code><html dir=\"ltr\"></code>",
                "<code><html code=\"en\"></code>"
            ],
            "text": "How do you specify the language of an HTML document?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@each $i from 1 through 3 { … }</code>",
                "<code>@for $i in 1..3 { … }</code>",
                "<code>@for $i from 1 through 3 { … }</code>",
                "<code>@while $i < 4 { … }</code>",
                "<code>@loop $i { … }</code>"
            ],
            "text": "How do you write a 1–3 index for a loop in SCSS?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>@container (min-width: 400px) { … }</code>",
                "<code>@media container and (min-width: 400px) { … }</code>",
                "<code>@container-type (min-width: 400px) { … }</code>",
                "<code>@query (container-width >= 400px) { … }</code>",
                "<code>@container width: 400px { … }</code>"
            ],
            "text": "How do you write a container query to apply styles when a container’s width is at least 400px?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@variable --main-color: #333;</code>",
                "<code>--main-color = #333;</code>",
                "<code>:root { --main-color: #333; }</code>",
                "<code>variable(--main-color): #333;</code>",
                "<code>root --main-color: #333;</code>"
            ],
            "text": "How would you define a custom property (CSS variable)?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Always recompute <code>slowFib</code> each call",
                "Wrap it with a cache: <code>const memo = {}; return memo[n] ??= slowFib(n-1)+slowFib(n-2);</code>",
                "Use <code>setTimeout</code> inside <code>slowFib</code>",
                "Use <code>async</code>/<code>await</code>",
                "Convert to tail recursion"
            ],
            "text": "How would you implement <strong>memoization</strong> for a function <code>slowFib(n)</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>Promise.race([fetch(url), setTimeout(timeout)])</code>",
                "<code>Promise.race([fetch(url), rejectAfter(timeout)])</code>",
                "<code>Promise.race([ fetch(url), new Promise((_, rej) => setTimeout(() => rej(new Error('Timeout')), timeout)) ])</code>",
                "<code>fetch(url, { timeout })</code>",
                "Use <code>setImmediate</code> to cancel"
            ],
            "text": "How would you implement a timeout for a fetch request using <code>Promise.race()</code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@media all and (max-device-width: 600px) { … }</code>",
                "<code>@media screen and (min-width: 600px) { … }</code>",
                "<code>@media screen and (max-width: 600px) { … }</code>",
                "<code>@media (width < 600px) { … }</code>",
                "<code>@media only screen (max-width: 600px) { … }</code>"
            ],
            "text": "How would you write a media query for screens narrower than 600px?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>.container-fluid</code>",
                "<code>.container</code>",
                "<code>.container-responsive</code>",
                "<code>.container-fixed</code>",
                "<code>.container-sm</code>"
            ],
            "text": "In Bootstrap 5, which class creates a responsive fixed-width container that adapts at each breakpoint?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Automatically generate grid tracks",
                "Name and place grid cells via an ASCII-art layout",
                "Define responsive breakpoints",
                "Control the stacking context of grid items",
                "Create grid gaps without <code>grid-gap</code>"
            ],
            "text": "In CSS Grid, what does <code>grid-template-areas</code> allow you to do?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>align-items: stretch;</code>",
                "<code>justify-content: stretch;</code>",
                "<code>flex-grow: 1;</code>",
                "<code>flex-shrink: 0;</code>",
                "<code>align-self: fill;</code>"
            ],
            "text": "In Flexbox, which property makes items stretch to fill the cross-axis?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><td></code>",
                "<code><trh></code>",
                "<code><tr></code>",
                "<code><th></code>",
                "<code><row></code>"
            ],
            "text": "In HTML, which tag is used to create a table row?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><media></code>",
                "<code><embed></code>",
                "<code><video></code>",
                "<code><source></code>",
                "<code><movie></code>"
            ],
            "text": "In HTML5, which element is used to embed a video file?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>require</code>",
                "<code>import</code>",
                "<code>include</code>",
                "<code>use</code>",
                "<code>fetch</code>"
            ],
            "text": "In JavaScript modules, which keyword is used to import the default export?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>$primary: #fff;</code>",
                "<code>@primary-color: #fff;</code>",
                "<code>@primary-color: #fff;</code>",
                "<code>--primary: #fff;</code>",
                "<code>%primary: #fff;</code>"
            ],
            "text": "In Less, how do you declare a variable?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@var primary-color: #333;</code>",
                "<code>$primary-color: #333;</code>",
                "<code>--primary-color: #333;</code>",
                "<code>@primary-color: #333;</code>",
                "<code>%primary-color: #333;</code>"
            ],
            "text": "In SCSS, how do you declare a variable?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>map-merge($map1 $map2)</code>",
                "<code>map-merge($map1, $map2)</code>",
                "<code>merge-maps($map1, $map2)</code>",
                "<code>$map1 + $map2</code>",
                "<code>map-concat($map1, $map2)</code>"
            ],
            "text": "In SCSS, how do you merge two maps?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Mixes in a partial’s contents",
                "Re‐exports selected members from a module",
                "Imports and immediately uses a partial",
                "Deletes unused selectors",
                "Aliases variables"
            ],
            "text": "In SCSS, what does <code>@forward</code> do?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Enables built-in browser validation",
                "Disables browser’s automatic form validation on submit",
                "Marks the form as required",
                "Forces HTML5 validation only",
                "Validates each field individually"
            ],
            "text": "In an HTML form, what does the <code>novalidate</code> attribute do?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "Opens the link in a new tab or window.",
                "Closes the current window after clicking the link.",
                "Opens the link in the same tab or window.",
                "Disables the link.",
                "Changes the link to open as a download."
            ],
            "text": "The <code>target=\"_blank\"</code> attribute in an <code><a></code> tag does what?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>$gutter-width</code>",
                "<code>$grid-gap</code>",
                "<code>$grid-gutter-width</code>",
                "<code>$row-gutter</code>",
                "<code>$container-gutter</code>"
            ],
            "text": "To adjust the gutter width globally in Sass, which variable do you override?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>clip-path: circle();</code>",
                "<code>border-radius: 50%;</code>",
                "<code>shape-outside: circle();</code>",
                "<code>overflow: hidden;</code>",
                "<code>mask: circle();</code>"
            ],
            "text": "To create a circular element with equal width and height, which property helps cut off excess corners?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.embed-responsive-16by9</code>",
                "<code>.ratio-responsive-16x9</code>",
                "<code>.ratio ratio-16x9</code>",
                "<code>.embed-responsive embed-responsive-16by9</code>",
                "<code>.video-responsive-16by9</code>"
            ],
            "text": "To create a responsive embed for a 16:9 video, which class wrapper do you use?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>display: flex</code>",
                "<code>display: inline-grid</code>",
                "<code>display: grid</code>",
                "<code>display: table</code>",
                "<code>display: block</code>"
            ],
            "text": "To create a two-column grid layout, which display value would you use?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><ul></code>",
                "<code><li></code>",
                "<code><ol></code>",
                "<code><list></code>",
                "<code><ordlist></code>"
            ],
            "text": "To create an ordered list in HTML, which tag is used?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>tabindex</code>",
                "<code>accesskey</code>",
                "<code>navindex</code>",
                "<code>order</code>",
                "<code>focus</code>"
            ],
            "text": "To establish keyboard navigation order, which attribute is used?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code><style src=\"styles.css\"></code>",
                "<code><stylesheet href=\"styles.css\"></code>",
                "<code><css href=\"styles.css\"></code>",
                "<code><link rel=\"stylesheet\" href=\"styles.css\"></code>",
                "<code><script href=\"styles.css\"></code>"
            ],
            "text": "To include a CSS file in your HTML, which tag and attribute do you use?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@import button;</code>",
                "<code>@include button;</code>",
                "<code>@use button;</code>",
                "<code>@extend button;</code>",
                "<code>@mixin button;</code>"
            ],
            "text": "To include a mixin called <code>button</code>, you write:"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>checked</code>",
                "<code>default</code>",
                "<code>selected</code>",
                "<code>value</code>",
                "<code>active</code>"
            ],
            "text": "To make a checkbox checked by default, which attribute is used?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Only <code>title</code>",
                "Only <code>role=\"img\"</code>",
                "A descriptive <code>alt</code> text (and if decorative, empty <code>alt=\"\"</code>)",
                "Only <code>aria-label</code>",
                "Only <code>aria-describedby</code>"
            ],
            "text": "To make an image accessible, which combination of attributes or techniques is most important?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>mandatory</code>",
                "<code>required</code>",
                "<code>validate</code>",
                "<code>mustfill</code>",
                "<code>checked</code>"
            ],
            "text": "To make an input field required in HTML, which attribute should be added?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>role=\"legacy\"</code>",
                "<code>data-html5=\"true\"</code>",
                "<code>role=\"region\"</code>",
                "<code>polyfill=\"true\"</code>",
                "No fallback needed"
            ],
            "text": "To support older browsers that don’t recognize HTML5 sectioning, what attribute can you add to elements like <code><section></code> to ensure they work?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>true</code>",
                "<code>false</code>",
                "Throws a TypeError",
                "<code>undefined</code>",
                "<code>NaN</code>"
            ],
            "text": "What about this one? <code>console.log(0 === '0');</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "A new array type",
                "Composable transformation functions that process data without creating intermediate collections",
                "A type of Promise",
                "A callback pattern",
                "A DOM event"
            ],
            "text": "What are <strong>transducers</strong>?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>data-bs-toggle=\"dialog\"</code>",
                "<code>data-bs-toggle=\"modal\"</code>",
                "<code>data-toggle=\"modal\"</code>",
                "<code>data-target=\"#modal\"</code>",
                "<code>data-bs-show=\"modal\"</code>"
            ],
            "text": "What data attribute triggers a Bootstrap modal to open when clicked?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Both execute scripts immediately",
                "Both prevent scripts from downloading until after parsing",
                "Both allow scripts to download in parallel with HTML parsing",
                "Both remove scripts from the document",
                "Both only work for external scripts"
            ],
            "text": "What do the <code>async</code> and <code>defer</code> script attributes have in common?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "A promise resolved with an array of values for fulfilled promises only",
                "A promise rejected if any input promise rejects",
                "A promise resolved with an array of objects describing each promise’s outcome",
                "A promise that never settles",
                "A promise resolved with <code>[fulfilled, rejected]</code> counts"
            ],
            "text": "What does <code>Promise.allSettled()</code> return when passed an array of promises?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Executes the function in a separate thread",
                "Makes all return values automatically rejected promises",
                "Ensures the function returns a Promise and allows use of <code>await</code> inside",
                "Converts callback-based code to promise-based code",
                "Delays the function execution until the call stack is clear"
            ],
            "text": "What does <code>async</code> before a function declaration do?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Prevents child elements from inheriting styles",
                "Creates a boundary so layout and paint are contained, reducing repaint cost",
                "Forces the element to use its own stacking context",
                "Disables pointer events inside the element",
                "Automatically polyfills CSS features"
            ],
            "text": "What does <code>contain: layout paint;</code> do?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Centers items vertically",
                "Aligns items at the flex-start",
                "Aligns items at the flex-end",
                "Distributes items evenly with first at start and last at end",
                "Stretches items to fill"
            ],
            "text": "What does <code>justify-content: space-between;</code> do in a flex container?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>0</code>",
                "<code>undefined</code>",
                "<code>null</code>",
                "<code>NaN</code>",
                "Throws SyntaxError"
            ],
            "text": "What does <code>void 0</code> evaluate to?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "To ignore this element during painting",
                "To optimize for upcoming changes to the transform property",
                "To remove the element from the layout flow",
                "To defer loading of child elements",
                "To polyfill transform on older browsers"
            ],
            "text": "What does <code>will-change: transform;</code> signal to the browser?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Using only <code>let</code> instead of <code>var</code>",
                "Data structures cannot be changed after creation; operations return new copies",
                "Objects must be frozen with <code>Object.freeze()</code>",
                "Variables declared at top‐level only",
                "Always using <code>const</code>"
            ],
            "text": "What does <strong>immutability</strong> mean in functional JavaScript?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Always naming all function parameters explicitly",
                "Defining functions without mentioning their arguments, by composing other functions",
                "Avoiding arrow functions",
                "Declaring functions inside objects",
                "Using only higher-order functions"
            ],
            "text": "What does <strong>point-free</strong> style mean?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "HyperText Machine Language",
                "Hyperlink and Text Markup Language",
                "HyperText Markup Language",
                "Hyperlinking Textual Markup Language",
                "HyperText Markdown Language"
            ],
            "text": "What does HTML stand for?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Lowers the rule’s specificity",
                "Overrides normal cascade order, even if specificity is lower",
                "Defers the rule until all other rules are applied",
                "Makes the rule apply only in development mode",
                "Converts the rule into an inline style"
            ],
            "text": "What does the <code>!important</code> declaration do?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "The background color of the page",
                "The base URL for all relative URLs in the document",
                "The primary font size",
                "The default language",
                "The base character encoding"
            ],
            "text": "What does the <code><base></code> element define?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Returns an array with the rejected promise’s error in place",
                "Ignores the rejection and resolves with other values",
                "Throws the rejection immediately and skips waiting for other promises",
                "Converts all results to strings",
                "Retries the rejected promise"
            ],
            "text": "What does the <code>await Promise.all([...])</code> construct do when one promise rejects?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Converts the function into a promise",
                "Rejects the promise on error",
                "Pauses execution until the promise settles and returns its value",
                "Makes the function synchronous",
                "Catches any errors automatically"
            ],
            "text": "What does the <code>await</code> operator do inside an <code>async</code> function?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Includes margin in the element’s total width/height",
                "Excludes padding from width/height calculations",
                "Includes padding and border in the element’s width/height",
                "Makes the box invisible",
                "Forces width to always be 100%"
            ],
            "text": "What does the <code>box-sizing: border-box;</code> declaration do?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Prevents the script from running",
                "Executes script immediately before parsing HTML",
                "Loads script from cache only",
                "Downloads script during parsing but executes after parsing completes",
                "Executes script only if <code>async</code> is also present"
            ],
            "text": "What does the <code>defer</code> attribute on a <code><script></code> tag do?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Marks the field as required",
                "Shows a hint that disappears when the user types",
                "Validates the input",
                "Sets a default value submitted with the form",
                "Disables the input"
            ],
            "text": "What does the <code>placeholder</code> attribute do on an <code><input></code> element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "The global object",
                "<code>undefined</code>",
                "The object the method was called on",
                "A new empty object",
                "The function itself"
            ],
            "text": "What does the <code>this</code> keyword refer to inside a regular function called as a method on an object?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Runs <code>map</code> then <code>reduce</code>",
                "Only flattens one level of nested arrays",
                "Maps each element then flattens the result by one level",
                "Filters and maps simultaneously",
                "Creates an infinite lazy sequence"
            ],
            "text": "What does the <strong><code>flatMap</code></strong> method do?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Always applies the mixin",
                "Applies only if <code>@radius</code> is greater than 0",
                "Applies only if <code>@radius</code> is less than 0",
                "Applies only if <code>@radius</code> equals 0",
                "Ignores the mixin"
            ],
            "text": "What does the following Less guard do? <code>.rounded(@radius) when (@radius > 0) { border-radius: @radius;}</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>false</code>",
                "<code>true</code>",
                "<code>TypeError</code>",
                "<code>NaN</code>",
                "<code>undefined</code>"
            ],
            "text": "What does this expression evaluate to? <code>[] == ![];</code>"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>true</code>",
                "<code>false</code>",
                "Throws a TypeError",
                "<code>undefined</code>",
                "<code>NaN</code>"
            ],
            "text": "What does this log to the console? <code>console.log(0 == '0');</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>baNaNa</code>",
                "<code>banana</code>",
                "<code>BaNaNa</code>",
                "<code>undefined</code>",
                "Throws NaN"
            ],
            "text": "What does this output? <code>console.log(('b' + 'a' + + 'a' + 'a').toLowerCase());</code>"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>[undefined]</code>",
                "<code>[]</code>",
                "A self-referencing array (<code>[ [Circular] ]</code>)",
                "Throws a TypeError",
                "<code>null</code>"
            ],
            "text": "What does this push into the array? <code>const arr = []; arr.push( arr ); console.log(arr);</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Sets the page title encoding",
                "Declares the character encoding for interpreting document bytes",
                "Embeds a font",
                "Defines cookie settings",
                "Controls form submission encoding"
            ],
            "text": "What effect does the <code>charset=\"UTF-8\"</code> attribute on a <code><meta></code> tag have?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "They cannot return implicitly",
                "They bind their own <code>arguments</code> object",
                "They cannot be used as constructors (<code>new</code>)",
                "They cannot be assigned to variables",
                "They don’t support default parameters"
            ],
            "text": "What feature do arrow functions <strong>not</strong> have compared to regular functions?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "The first <code><div></code> in the document",
                "All <code><html></code> children",
                "The document’s root element (usually <code><html></code>)",
                "All custom properties",
                "The highest z-index element"
            ],
            "text": "What feature does the <code>:root</code> selector target?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>map-get($map, $key)</code>",
                "<code>map-get($map, $key)</code>",
                "<code>get-map($map, $key)</code>",
                "<code>map($map, $key)</code>",
                "<code>lookup($map, $key)</code>"
            ],
            "text": "What function returns the value associated with a key in a SCSS map?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>true</code>",
                "<code>false</code>",
                "<code>undefined</code>",
                "<code>TypeError</code>",
                "<code>null</code>"
            ],
            "text": "What gets logged? <code>let obj = { a: 1 }; let copy = Object.assign({}, obj); console.log(copy === obj);</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>o.x</code> becomes <code>undefined</code>",
                "The delete fails silently (or throws in strict mode), property remains",
                "Throws TypeError in non-strict mode",
                "The property is removed and restored to default",
                "Throws ReferenceError"
            ],
            "text": "What happens when you delete a non-configurable property? <code>const o = {}; Object.defineProperty(o, 'x', { value: 1, configurable: false }); delete o.x;</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>.text-truncate</code>",
                "<code>.text-truncate</code>",
                "<code>.truncate</code>",
                "<code>.ellipsis</code>",
                "<code>.text-overflow</code>"
            ],
            "text": "What helper class would you use to truncate text with an ellipsis?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Combining two functions into one",
                "Transforming a function of multiple arguments into a chain of functions each taking a single argument",
                "Allowing a function to accept an object instead of separate args",
                "Automatically memoizing function calls",
                "Executing functions in parallel"
            ],
            "text": "What is <strong>currying</strong>?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Applying a function to as many arguments as it expects",
                "Pre-filling some arguments of a function to produce another function of smaller arity",
                "Running functions in sequence",
                "Memoizing results of a function",
                "Splitting a function into two"
            ],
            "text": "What is <strong>partial application</strong>?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "When a function can refer to global variables",
                "Expressions can be replaced with their values without changing program behavior",
                "When <code>this</code> always refers to the same object",
                "Variables declared with <code>const</code>",
                "Functions declared at top‐level only"
            ],
            "text": "What is <strong>referential transparency</strong>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "A loop that captures all variables",
                "A function that runs once then destroys itself",
                "A function bundled with its lexical environment, allowing access to outer scope after execution",
                "A special type of promise",
                "A method that closes variables"
            ],
            "text": "What is a <strong>closure</strong> in JavaScript?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "A function that performs side effects",
                "A container that implements a <code>map</code> method to apply a function inside it",
                "A function with two arguments",
                "An object with no methods",
                "A promise that always resolves"
            ],
            "text": "What is a <strong>functor</strong> in functional JavaScript (e.g., <code>Maybe</code>, <code>Array</code>)?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "A function that does not return anything",
                "A function declared with <code>function*</code>",
                "A function that always returns the same output for the same inputs and has no side effects",
                "A function that only uses <code>const</code>",
                "A function bound to <code>this</code>"
            ],
            "text": "What is a <strong>pure function</strong> in JavaScript?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code><br></code>",
                "<code><lb></code>",
                "<code><break></code>",
                "<code><newline></code>",
                "<code><line></code>"
            ],
            "text": "What is the correct HTML element for inserting a line break?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>absolute</code>",
                "<code>fixed</code>",
                "<code>relative</code>",
                "<code>static</code>",
                "<code>sticky</code>"
            ],
            "text": "What is the default value of the <code>position</code> property?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "To add images to a webpage.",
                "To provide metadata about the HTML document.",
                "To create links to other web pages.",
                "To define the primary header of the document.",
                "To structure the content layout."
            ],
            "text": "What is the purpose of the <code><meta></code> tag in HTML?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>undefined</code>",
                "<code>NaN</code>",
                "<code>\"\"</code> (empty string)",
                "<code>0</code>",
                "<code>[]</code>"
            ],
            "text": "What is the result of the expression: <code>[] + [];</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>2</code>",
                "<code>4</code>",
                "<code>NaN</code>",
                "Throws ReferenceError",
                "<code>undefined</code>"
            ],
            "text": "What is the result of: <code>function sum(x, y = x) { return x + y; }  sum(2);  </code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>NaN</code>",
                "<code>number</code>",
                "<code>undefined</code>",
                "<code>object</code>",
                "<code>error</code>"
            ],
            "text": "What is the result of: <code>typeof NaN;</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "The getter function",
                "<code>42</code>",
                "<code>undefined</code>",
                "Throws a ReferenceError",
                "<code>null</code>"
            ],
            "text": "What is the value of <code>bar</code> after execution? <code>const obj = { get foo() { return 42; } }; const bar = obj.foo;</code>"
        },
        {
            "correctOptionIndex": 4,
            "options": [
                "A, B, C, D",
                "A, D, B, C",
                "A, D, C, B",
                "A, C, D, B",
                "A, D, C, B"
            ],
            "text": "What order do these statements execute? <code>console.log('A'); setTimeout(() => console.log('B'), 0); Promise.resolve().then(() => console.log('C')); console.log('D');</code>"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>%shared</code>",
                "<code>%shared</code>",
                "<code>.shared--placeholder</code>",
                "<code>@placeholder shared</code>",
                "<code>&shared</code>"
            ],
            "text": "What placeholder selector lets you share styles without generating a class in the output CSS?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.position-fixed-top</code>",
                "<code>.sticky</code>",
                "<code>.sticky-top</code>",
                "<code>.fixed-top</code>",
                "<code>.position-sticky</code>"
            ],
            "text": "What utility class makes an element sticky at the top of its container?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>1</code>",
                "<code>2</code>",
                "<code>undefined</code>",
                "Throws a ReferenceError",
                "<code>null</code>"
            ],
            "text": "What will be the value of <code>a</code> after execution? <code>var a = 1; function foo() { console.log(a); var a = 2; } foo();</code>"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>object</code>",
                "<code>null</code>",
                "<code>undefined</code>",
                "<code>number</code>",
                "<code>NaN</code>"
            ],
            "text": "What will the following code log to the console? <code>console.log(typeof null);</code>"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Start, Timeout, Promise, End",
                "Start, End, Timeout, Promise",
                "Start, Promise, End, Timeout",
                "Start, End, Promise, Timeout",
                "Start, Promise, Timeout, End"
            ],
            "text": "What will the following code output first? <code>console.log('Start'); setTimeout(() => console.log('Timeout'), 0); Promise.resolve().then(() => console.log('Promise')); console.log('End');</code>"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>0 1 2</code>",
                "<code>0 0 0</code>",
                "<code>undefined undefined undefined</code>",
                "<code>3 3 3</code>",
                "<code>1 2 3</code>"
            ],
            "text": "What will this code output? <code>for (var i = 0; i < 3; i++) {  setTimeout(() => console.log(i), 0); }</code>"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>true</code>",
                "<code>undefined</code>",
                "<code>false</code>",
                "<code>TypeError</code>",
                "<code>NaN</code>"
            ],
            "text": "What will this log? <code>console.log(0.1 + 0.2 === 0.3);</code>"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code>setImmediate</code> callbacks run before timers scheduled with <code>setTimeout(..., 0)</code> in the same turn",
                "There is no difference; they are aliases",
                "<code>setTimeout(..., 0)</code> runs before <code>setImmediate</code> always",
                "<code>setImmediate</code> uses the microtask queue while <code>setTimeout</code> uses the macrotask queue",
                "<code>setImmediate</code> is deprecated and behaves like <code>setInterval</code>"
            ],
            "text": "What’s the difference between <code>setImmediate(fn)</code> (Node.js) and <code>setTimeout(fn, 0)</code>?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Disables background images",
                "Converts the element to inline",
                "Forces the element above all siblings",
                "Blends the element with its backdrop using multiply blending",
                "Clips the element to its parent bounds"
            ],
            "text": "What’s the effect of <code>mix-blend-mode: multiply;</code> on an element?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code><section></code> cannot contain other sections",
                "<code><section></code> implies thematic grouping with a heading; <code><div></code> is generic",
                "<code><div></code> is only for layout, <code><section></code> is for styling",
                "There is no difference",
                "<code><div></code> must always have a class"
            ],
            "text": "What’s the primary semantic difference between <code><section></code> and <code><div></code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Sets the order to 1 only on extra-small screens",
                "Resets default order on all breakpoints",
                "Assigns order 1 on medium screens and up",
                "Aligns the first child only on medium screens",
                "Hides the element on medium screens"
            ],
            "text": "What’s the purpose of the <code>.order-md-1</code> class in Bootstrap’s grid?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Defines a preformatted text area",
                "Creates numbered sections",
                "Groups related elements in a form",
                "Embeds an external resource",
                "Marks associative data"
            ],
            "text": "What’s the purpose of the <code><fieldset></code> element?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Displays content after a delay",
                "Holds inert DOM that isn’t rendered until instantiated via script",
                "Marks experimental HTML",
                "Provides CSS scoping",
                "Defines server-only markup"
            ],
            "text": "What’s the role of the <code><template></code> element?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Symbols collide with strings",
                "Numeric keys are converted to strings so different numbers can collide (<code>{1: 'a', '1': 'b'}</code>)",
                "<code>true</code> and <code>'true'</code> collide",
                "<code>null</code> and <code>'null'</code> collide",
                "No collisions occur"
            ],
            "text": "When converting object keys to strings, what key collisions can occur?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code><image></code>",
                "<code><media></code>",
                "<code><src></code>",
                "<code><source></code>",
                "<code><meta></code>"
            ],
            "text": "When using the <code><picture></code> element for responsive images, what child element defines the image source variants?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "To visually hide but keep in layout flow",
                "To semantically mark content as not relevant and hide it from all users",
                "To hide only on mobile devices",
                "To hide until CSS loads",
                "To hide but keep for screen readers"
            ],
            "text": "When would you use the <code>hidden</code> attribute on an HTML element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>role=\"application\"</code>",
                "<code>role=\"region\"</code>",
                "<code>role=\"application\"</code>",
                "<code>role=\"complementary\"</code>",
                "<code>role=\"main\"</code>"
            ],
            "text": "Which ARIA role is most appropriate for an element that serves as an application landmark, like a slider or tree view?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>calc()</code>",
                "<code>min()</code>",
                "<code>max()</code>",
                "<code>clamp()</code>",
                "<code>var()</code>"
            ],
            "text": "Which CSS function is best suited for creating fluid, clamped font sizes?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>calcunit()</code>",
                "<code>calc()</code>",
                "<code>math()</code>",
                "<code>compute()</code>",
                "<code>expression()</code>"
            ],
            "text": "Which CSS function lets you perform math directly in property values?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>margin</code>",
                "<code>padding</code>",
                "<code>spacing</code>",
                "<code>border-spacing</code>",
                "<code>inset</code>"
            ],
            "text": "Which CSS property adds space inside an element’s border?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>font-color</code>",
                "<code>text-style</code>",
                "<code>color</code>",
                "<code>text-color</code>",
                "<code>foreground</code>"
            ],
            "text": "Which CSS property is used to change the text color of an element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><component src=\"x.html\"></code>",
                "<code><widget url=\"...\"></code>",
                "Any custom tag name defined via <code>class MyEl extends HTMLElement</code>",
                "<code><embed type=\"component\"></code>",
                "<code><div is=\"component-element\"></code>"
            ],
            "text": "Which HTML element and attribute combination enables embedding a Web Component?"
        },
        {
            "correctOptionIndex": 0,
            "options": [
                "<code><nav></code>",
                "<code><navbar></code>",
                "<code><navigation></code>",
                "<code><navigate></code>",
                "<code><section></code>"
            ],
            "text": "Which HTML element defines navigation links?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code><object></code>",
                "<code><embed></code>",
                "<code><include></code>",
                "<code><iframe></code>",
                "<code><inline></code>"
            ],
            "text": "Which HTML element is designed to display contents of another document inline within the current HTML document?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><em></code>",
                "<code><highlight></code>",
                "<code><strong></code>",
                "<code><important></code>",
                "<code><mark></code>"
            ],
            "text": "Which HTML element is used to define important text?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><aside></code>",
                "<code><section></code>",
                "<code><header></code>",
                "<code><footer></code>",
                "<code><div></code>"
            ],
            "text": "Which HTML5 element is best for grouping a set of introductory or navigational aids for a page or section?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>bootstrap.bundle.js</code>",
                "<code>popper.js</code> only",
                "<code>bootstrap.bundle.js</code> (includes Popper)",
                "<code>bootstrap.js</code> only",
                "No JS required"
            ],
            "text": "Which JavaScript plugin must you include for Bootstrap’s dropdowns to work?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Loops",
                "Guards",
                "Mixins with arguments",
                "Functions",
                "Placeholders"
            ],
            "text": "Which Less feature allows parameterized mixins?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>to-rgb(#fff)</code>",
                "<code>rgb(255, 255, 255)</code> returns the string, but to extract channels you use <code>red()</code>, <code>green()</code>, <code>blue()</code>",
                "<code>hex2rgb(#fff)</code>",
                "<code>color-rgb(#fff)</code>",
                "<code>rgba(#fff)</code>"
            ],
            "text": "Which Less function converts a hex to RGB?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>shade($color, 20%)</code>",
                "<code>adjust-hue($color, -20%)</code>",
                "<code>darken($color, 20%)</code>",
                "<code>desaturate($color, 20%)</code>",
                "<code>mix($color, black, 20%)</code>"
            ],
            "text": "Which Sass function darkens a color by 20%?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>$theme-colors</code>",
                "<code>$theme-colors</code>",
                "<code>$colors</code>",
                "<code>$brand-colors</code>",
                "<code>$palette</code>"
            ],
            "text": "Which Sass map in Bootstrap’s source holds the default theme colors?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Nesting callbacks inside callbacks",
                "Using global state",
                "Chaining Promises or using <code>async</code>/<code>await</code>",
                "Blocking the event loop",
                "Infinite recursion"
            ],
            "text": "Which approach avoids <strong>callback hell</strong> in asynchronous functional code?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>map()</code>",
                "<code>filter()</code>",
                "<code>reduce()</code>",
                "<code>every()</code>",
                "<code>find()</code>"
            ],
            "text": "Which array method reduces an array of values to a <strong>single</strong> value?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>data</code>",
                "<code>custom-*</code>",
                "<code>data-*</code>",
                "<code>aria-data</code>",
                "<code>meta-*</code>"
            ],
            "text": "Which attribute allows you to store custom data on any HTML element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>name</code>",
                "<code>link</code>",
                "<code>href</code>",
                "<code>src</code>",
                "<code>url</code>"
            ],
            "text": "Which attribute is necessary for the <code><a></code> tag to function as a link?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>srcset</code>",
                "<code>src</code>",
                "<code>href</code>",
                "<code>alt</code>",
                "<code>title</code>"
            ],
            "text": "Which attribute is required in an <code><img></code> tag to specify the image file?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>method</code>",
                "<code>action</code>",
                "<code>target</code>",
                "<code>enctype</code>",
                "<code>name</code>"
            ],
            "text": "Which attribute on <code><form></code> specifies where to send form data upon submission?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>title</code>",
                "<code>alt</code>",
                "<code>description</code>",
                "<code>tooltip</code>",
                "<code>aria-label</code>"
            ],
            "text": "Which attribute on <code><img></code> provides alternative text for accessibility?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>autoplayable</code>",
                "<code>autoplay</code>",
                "<code>auto</code>",
                "<code>playonload</code>",
                "<code>start</code>"
            ],
            "text": "Which attribute turns an <code><audio></code> or <code><video></code> element into a media that plays automatically when ready?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@media (min-width: 576px)</code>",
                "<code>@media (min-width: 992px) and (max-width: 1199px)</code>",
                "<code>@media (min-width: 992px)</code>",
                "<code>@media (min-width: 1200px)</code>",
                "<code>@media (max-width: 992px)</code>"
            ],
            "text": "Which breakpoint shorthand applies styles only on large screens and up?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>-xs</code>",
                "<code>-tiny</code>",
                "There is no “xs” suffix in Bootstrap 5; use unprefixed <code>.col-*</code> for extra-small",
                "<code>-mobile</code>",
                "<code>-sm-down</code>"
            ],
            "text": "Which breakpoint suffix targets screens smaller than the small (sm) breakpoint?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>Error.stack()</code>",
                "<code>new Error().stack</code>",
                "<code>console.trace()</code>",
                "<code>StackTrace()</code>",
                "<code>Error.callStack()</code>"
            ],
            "text": "Which built-in method returns the call stack leading to where it was called?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "A function that uses arrow syntax",
                "A function that takes one or more functions as arguments or returns a function",
                "A function that runs asynchronously",
                "A function that mutates its arguments",
                "A function that is called only once"
            ],
            "text": "Which characteristic describes a <strong>higher-order function</strong>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.g-0x</code>",
                "<code>.gx-none</code>",
                "<code>.gx-0</code>",
                "<code>.gutter-0</code>",
                "<code>.no-gutters</code>"
            ],
            "text": "Which class adds horizontal gutters of 0 for a row?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>.rounded-top-sm</code>",
                "<code>.rounded-top</code>",
                "<code>.rounded-corners-top</code>",
                "<code>.border-top-rounded</code>",
                "<code>.rtop</code>"
            ],
            "text": "Which class applies a border-radius only on the top corners?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>.img-responsive</code>",
                "<code>.img-fluid</code>",
                "<code>.responsive-img</code>",
                "<code>.img-scale</code>",
                "<code>.fluid-img</code>"
            ],
            "text": "Which class makes an image scale nicely to the parent element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.theme-dark</code>",
                "<code>.mode-dark</code>",
                "Add <code>data-bs-theme=\"dark\"</code> on <code><html></code> or <code><body></code>",
                "<code>.dark-mode</code>",
                "<code>.bg-dark-mode</code>"
            ],
            "text": "Which class toggles dark mode utilities in Bootstrap?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "Already works as intended",
                "<code>start() { setTimeout(this.increment.bind(this), 1000); }</code>",
                "<code>start() { setTimeout(() => this.increment(), 1000); }</code>",
                "Both of the above fix the binding",
                "Use <code>var self = this</code> inside <code>start</code>"
            ],
            "text": "Which code correctly binds <code>this</code> in a callback? <code>class Counter { count = 0; increment() { this.count++; } start() { setTimeout(this.increment, 1000); } }</code>"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Modal",
                "Toast",
                "Carousel",
                "Accordion",
                "Popover"
            ],
            "text": "Which component uses the <code>.carousel-item</code> class?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@while</code>",
                "<code>@if</code>",
                "<code>@each</code>",
                "<code>@for</code>",
                "<code>@map</code>"
            ],
            "text": "Which control directive lets you loop a block of styles over a list?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>data-delay-show</code>",
                "<code>data-bs-delay-show</code>",
                "<code>data-bs-delay</code> (with <code>{ \"show\": … }</code> config)",
                "<code>data-tooltip-delay</code>",
                "<code>data-bs-tooltip-delay</code>"
            ],
            "text": "Which data attribute controls the delay before a tooltip shows?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "January 1, 2025",
                "December 1, 2025",
                "Invalid Date",
                "Throws RangeError",
                "January 13, 2025"
            ],
            "text": "Which date is created by this? <code>new Date('2025-13-01');</code>"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@use 'reset';</code>",
                "<code>@import-partial 'buttons';</code>",
                "<code>@import 'buttons';</code>",
                "<code>@include 'buttons';</code>",
                "<code>@forward 'buttons';</code>"
            ],
            "text": "Which directive lets you import partials in SCSS?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code><description></code>",
                "<code><figcaption></code>",
                "<code><caption></code>",
                "<code><label></code>",
                "<code><title></code>"
            ],
            "text": "Which element allows you to define a caption for a <code><figure></code>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><link href=\"...\" rel=\"prefetch\"></code>",
                "<code><script rel=\"preload\" src=\"...\"></code>",
                "<code><link rel=\"preload\" href=\"...\" as=\"font\"></code>",
                "<code><meta rel=\"preload\" content=\"...\"></code>",
                "<code><asset preload></code>"
            ],
            "text": "Which element and attribute help you preload critical assets (like fonts or scripts) before the browser discovers them in HTML?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><js></code>",
                "<code><scripture></code>",
                "<code><script></code>",
                "<code><code></code>",
                "<code><javascript></code>"
            ],
            "text": "Which element defines a client-side script, such as JavaScript?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><meter></code>",
                "<code><range></code>",
                "<code><meter></code>",
                "<code><progress></code>",
                "<code><input type=\"range\"></code>"
            ],
            "text": "Which element is used to display a scalar measurement within a known range?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><svgfile></code>",
                "<code><vector></code>",
                "<code><svg></code>",
                "<code><img type=\"svg\"></code>",
                "<code><graphics></code>"
            ],
            "text": "Which element is used to embed scalable vector graphics in HTML?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code><bottom></code>",
                "<code><sectionfooter></code>",
                "<code><group></code>",
                "<code><footer></code>",
                "<code><aside></code>"
            ],
            "text": "Which element is used to group footer content in a section or page?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code><div class=\"post\"></code>",
                "<code><article></code>",
                "<code><section role=\"article\"></code>",
                "<code><aside></code>",
                "<code><container></code>"
            ],
            "text": "Which element provides a semantic way to mark up a self-contained composition, like a blog post or comment?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>load</code>",
                "<code>DOMContentLoaded</code>",
                "<code>readystatechange</code>",
                "<code>ready</code>",
                "<code>parsed</code>"
            ],
            "text": "Which event fires when the DOM has been fully parsed, without waiting for stylesheets or images?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Timers phase",
                "Immediately after the current operation, before other microtasks",
                "Poll phase",
                "Check phase",
                "Close callbacks phase"
            ],
            "text": "Which event loop phase executes <code>process.nextTick()</code> callbacks in Node.js?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>var</code>",
                "<code>function</code>",
                "<code>let</code>",
                "<code>global</code>",
                "<code>static</code>"
            ],
            "text": "Which keyword creates a block-scoped variable?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>for</code>",
                "<code>while</code>",
                "<code>do…while</code>",
                "<code>forEach</code>",
                "<code>for…in</code>"
            ],
            "text": "Which loop will always execute its body at least once?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>(theme: dark)</code>",
                "<code>(prefers-color-scheme: dark)</code>",
                "<code>(color-scheme: dark)</code>",
                "<code>(dark-mode: on)</code>",
                "<code>(user-theme: dark)</code>"
            ],
            "text": "Which media feature detects if the user prefers a dark color scheme?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>push()</code>",
                "<code>concat()</code>",
                "<code>unshift()</code>",
                "<code>splice()</code>",
                "<code>shift()</code>"
            ],
            "text": "Which method adds one or more elements to the <strong>beginning</strong> of an array?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>JSON.parse()</code>",
                "<code>Object.stringify()</code>",
                "<code>JSON.stringify()</code>",
                "<code>toJSON()</code>",
                "<code>Stringify()</code>"
            ],
            "text": "Which method converts a JavaScript object into a JSON string?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>forEach()</code>",
                "<code>filter()</code>",
                "<code>map()</code>",
                "<code>reduce()</code>",
                "<code>flatMap()</code>"
            ],
            "text": "Which method creates a <strong>new</strong> array by applying a function to each element of an existing array?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>@scope</code>",
                "<code>@use</code>",
                "<code>@module</code>",
                "<code>@local</code>",
                "<code>@private</code>"
            ],
            "text": "Which modern feature scopes styles to a module in Sass’s new module system?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>div.item span</code>",
                "<code>.item span:hover</code>",
                "<code>#container .item > span.active</code>",
                "<code>body div#container .item span</code>",
                "<code>*</code>"
            ],
            "text": "Which of the following has the highest CSS specificity?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Easier to test",
                "Predictable outputs",
                "Improved performance due to side-effects",
                "Referential transparency",
                "Better memoization"
            ],
            "text": "Which of these is <strong>NOT</strong> a benefit of using pure functions?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>symbol</code>",
                "<code>bigint</code>",
                "<code>undefined</code>",
                "<code>object</code>",
                "<code>boolean</code>"
            ],
            "text": "Which of these is <strong>not</strong> a primitive type in JavaScript?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Function declarations",
                "<code>var</code> variables (initialized to <code>undefined</code>)",
                "<code>let</code> and <code>const</code> declarations",
                "Class declarations",
                "Function parameters"
            ],
            "text": "Which of these is <strong>not</strong> hoisted?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "A recursive function that accumulates on the call stack",
                "A recursive function that returns the result of calling itself without further work (e.g., <code>return recurse(...);</code>)",
                "An iterative <code>for</code> loop",
                "Using <code>setTimeout</code> for recursion",
                "A generator function"
            ],
            "text": "Which of these is a <strong>tail-call optimized</strong> recursive approach in JS?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>Object.assign()</code>",
                "Libraries like Immer or Immutable.js",
                "<code>delete</code> operator",
                "<code>Array.prototype.splice()</code>",
                "Direct property assignment"
            ],
            "text": "Which of these utilities helps enforce <strong>immutability</strong>?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>=</code>",
                "<code>==</code>",
                "<code>===</code>",
                "<code>!=</code>",
                "<code>=></code>"
            ],
            "text": "Which operator checks both value and type equality?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>?.</code> (optional chaining)",
                "<code>&&</code>",
                "<code>?.</code> (e.g. <code>obj?.prop</code>)",
                "<code>|></code>",
                "<code>??</code>"
            ],
            "text": "Which operator creates a <strong>null-safe</strong> property access in modern JS?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "Nested callbacks",
                "Promise chaining",
                "Using global variables",
                "Synchronous loops",
                "Event emitters"
            ],
            "text": "Which pattern avoids “callback hell” by chaining asynchronous operations?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>letter-spacing</code>",
                "<code>line-height</code>",
                "<code>word-spacing</code>",
                "<code>text-spacing</code>",
                "<code>leading</code>"
            ],
            "text": "Which property controls the space between lines of text?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>visibility</code>",
                "<code>opacity</code>",
                "<code>transparency</code>",
                "<code>filter: alpha</code>",
                "<code>display</code>"
            ],
            "text": "Which property controls the transparency of an element?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>z-index</code> alone",
                "<code>opacity: 1</code>",
                "<code>position: relative</code>",
                "<code>transform: translateZ(0)</code>",
                "<code>display: inline-block</code>"
            ],
            "text": "Which property establishes a new stacking context?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>background-style</code>",
                "<code>background-position</code>",
                "<code>background-repeat</code>",
                "<code>background-layout</code>",
                "<code>background-tile</code>"
            ],
            "text": "Which property is used to control how background images are repeated?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>transition: none;</code>",
                "<code>animation-fill-mode: backwards;</code>",
                "<code>will-change: transform, opacity;</code>",
                "<code>animation-play-state: paused;</code>",
                "<code>contain: strict;</code>"
            ],
            "text": "Which property would you use to prevent an element from causing a layout shift when animated?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>:focus</code>",
                "<code>:active</code>",
                "<code>:focus-visible</code>",
                "<code>:focus-within</code>",
                "<code>:hover</code>"
            ],
            "text": "Which pseudo-class matches an element when it receives keyboard focus but not mouse focus?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>:before</code>",
                "<code>::before</code>",
                "<code>:first-child</code>",
                "<code>::first-letter</code>",
                "<code>::after</code>"
            ],
            "text": "Which pseudo-element lets you insert content before an element’s content?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "Macrotask queue",
                "Render queue",
                "Microtask queue",
                "Event callback queue",
                "Animation frame queue"
            ],
            "text": "Which queue does <code>.then()</code> callbacks use under the hood?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>@custom-breakpoints</code>",
                "<code>@breakpoint-queries</code>",
                "<code>@custom-media --bp: (min-width: 600px);</code>",
                "<code>@container-breakpoint</code>",
                "<code>@media-container</code>"
            ],
            "text": "Which rule lets you define custom breakpoints for container queries?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>:is(.a, .b)</code>",
                "<code>:not(.a, .b)</code>",
                "<code>:where(.a, .b)</code>",
                "<code>.a, .b</code>",
                "<code>:matches(.a, .b)</code>"
            ],
            "text": "Which selector list groups selectors without increasing specificity?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code>margin-all</code>",
                "<code>margin</code>",
                "<code>margins</code>",
                "<code>margin-shorthand</code>",
                "<code>m</code>"
            ],
            "text": "Which shorthand property sets all four margin values?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "It waits for all promises to fulfill or any to reject, then resolves with an array of results",
                "It resolves only after all promises in the iterable have resolved",
                "It rejects only if all promises reject",
                "It resolves or rejects as soon as the first promise settles",
                "It ignores rejected promises"
            ],
            "text": "Which statement about <code>Promise.race()</code> is true?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code><a rel=\"noreferrer\"></code>",
                "<code><a rel=\"noreferrer noopener\"></code>",
                "<code><a target=\"_self\" referrerpolicy=\"no-referrer\"></code>",
                "<code><link referrer=\"no-referrer\"></code>",
                "<code><a security=\"noreferrer\"></code>"
            ],
            "text": "Which tag and attribute combination would you use to hint that a link crosses origins and should not pass referrer information?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code><imagemap></code>",
                "<code><mapitem></code>",
                "<code><map></code>",
                "<code><area></code>",
                "<code><imgmap></code>"
            ],
            "text": "Which tag is used to define a client-side image map?"
        },
        {
            "correctOptionIndex": 1,
            "options": [
                "<code><b></code>",
                "<code><em></code>",
                "<code><i></code>",
                "<code><strong></code>",
                "<code><mark></code>"
            ],
            "text": "Which tag would you use to semantically denote emphasized text?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>%</code>",
                "<code>em</code>",
                "<code>rem</code>",
                "<code>vh</code>",
                "<code>vw</code>"
            ],
            "text": "Which unit is relative to the root element’s font size?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.scroll-smooth</code>",
                "<code>.smooth-scroll</code>",
                "<code>html { scroll-behavior: smooth; }</code> (Bootstrap doesn’t provide a specific class)",
                "<code>.bs-scroll-smooth</code>",
                "<code>.smooth.bs</code>"
            ],
            "text": "Which utility class adds a smooth scroll behavior to the document?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.mx-auto-left</code>",
                "<code>.m-auto</code>",
                "<code>.mx-auto</code>",
                "<code>.auto-margin</code>",
                "<code>.mx-center</code>"
            ],
            "text": "Which utility class adds horizontal margin auto to center a block element?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.text-nowrap</code>",
                "<code>.flex-wrap</code>",
                "<code>.flex-nowrap</code>",
                "<code>.nowrap</code>",
                "<code>.d-flex-nowrap</code>"
            ],
            "text": "Which utility class in Bootstrap v5 toggles text wrapping in flex items?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.text-default</code>",
                "<code>.text-body</code>",
                "<code>.text-white</code>",
                "<code>.text-primary</code>",
                "<code>.text-dark</code>"
            ],
            "text": "Which utility class pairs with <code>.bg-primary</code> to make text contrast properly?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>.align-content-*</code>",
                "<code>.justify-items-*</code>",
                "<code>.justify-content-*</code>",
                "<code>.align-self-*</code>",
                "<code>.flex-main-*</code>"
            ],
            "text": "Which utility lets you control the alignment of flex items along the main axis?"
        },
        {
            "correctOptionIndex": 3,
            "options": [
                "<code>inline</code>",
                "<code>inline-block</code>",
                "<code>none</code>",
                "<code>block</code>",
                "<code>flex</code>"
            ],
            "text": "Which value of <code>display</code> makes an element generate a block box and allow width/height?"
        },
        {
            "correctOptionIndex": 2,
            "options": [
                "<code>0, 1, 2</code> (after delays)",
                "<code>3, 3, 3</code>",
                "<code>0, 1, 2</code>",
                "<code>undefined</code> three times",
                "Nothing"
            ],
            "text": "Which values are logged? <code>for (let i = 0; i < 3; i++) { setTimeout(() => console.log(i), i * 100); }</code>"
        }
    ]
}